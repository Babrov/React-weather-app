{"version":3,"sources":["add-weather-form/add-weather-form.module.scss","card-list/component/card-list.module.scss","card-list/component/card-item/card.module.scss","card-list/store/card-list.actions.ts","card-list/store/card-list.selector.ts","card-list/card-list.util.ts","card-list/component/card-item/card-item.tsx","card-list/component/card-list.tsx","card-list/store/card-list.state.ts","models/weather-response-model/coordinates.model.ts","card-list/store/card-list.reducer.ts","card-list/store/card-list.epic.ts","request/get-weather.request.ts","add-weather-form/add-weather-form.tsx","app.tsx","store/index.reducer.ts","store/store.ts","index.tsx"],"names":["module","exports","getWeatherAction","action","payload","getWeatherSuccessAction","getWeatherFailedAction","getWeatherByLocationAction","getLocationAction","getLocationSuccessAction","getLocationFailedAction","removeCardAction","cardListSelector","state","weather","getTimeFromDate","date","toLocaleString","hour","minute","getDateWeek","weekday","month","day","CardItem","weatherInfo","onRemove","useState","isFlipped","setFlipped","name","main","wind","info","dt","sys","Date","timeFromDate","dateWeek","sunset","sunrise","icon","mainTemp","Math","round","temp","feelsLikeTemp","feels_like","weatherDescription","description","charAt","toUpperCase","slice","getFormattedInfo","handleFlip","prevState","cardBackground","css","card_cold","card_warm","className","card","classNames","inner","side","front_side","close","onClick","faTimes","city","src","alt","descr","time","navButtons","moreInfo","faArrowRight","back_side","moreData","pressure","speed","backButton","faArrowLeft","CardList","dispatch","useDispatch","useSelector","weatherList","isLoading","root","map","id","initialState","coordinates","lon","lat","filterWeather","filter","item","length","cardListReducer","reducer","on","error","cardListEpics","action$","pipe","ofType","toPayload","switchMap","cityName","fromFetch","process","method","selector","response","a","ok","json","Error","text","getWeatherRequest$","res","catchError","message","Observable","observer","window","navigator","geolocation","getCurrentPosition","position","next","coords","latitude","longitude","complete","concatMap","getWeatherByCoordsRequest$","validateCity","value","AddWeatherForm","initialValues","onSubmit","values","errors","touched","validate","type","location","faLocationArrow","App","createRootReducer","combineReducers","epicMiddleware","createEpicMiddleware","epics","rootEpic","store$","dependencies","combineEpics","source","console","log","store","middlewares","applyMiddleware","createStore","composeWithDevTools","run","_createStore","render","document","getElementById"],"mappings":"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","file":"static/js/main.ffb67187.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"add-weather-form_root__I-JFt\",\"input\":\"add-weather-form_input__3Rb5w\",\"location\":\"add-weather-form_location__wrKco\",\"getButton\":\"add-weather-form_getButton__ymE1L\",\"button_animation\":\"add-weather-form_button_animation__3Mx5N\",\"icon\":\"add-weather-form_icon__1urrW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"card-list_root__2FEnB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"card_card__1uUMi\",\"inner\":\"card_inner__3aGS4\",\"side\":\"card_side__3BQPs\",\"front_side\":\"card_front_side__2fMm4\",\"icon\":\"card_icon__1R5Ri\",\"temp\":\"card_temp__di7ld\",\"descr\":\"card_descr__1-Rmt\",\"time\":\"card_time__wn7gE\",\"date\":\"card_date__r4kyw\",\"moreInfo\":\"card_moreInfo__1bypu\",\"navButtons\":\"card_navButtons__38fML\",\"city\":\"card_city__hPi6V\",\"back_side\":\"card_back_side__CDcq3\",\"moreData\":\"card_moreData__2jWex\",\"backButton\":\"card_backButton__2yjox\",\"isFlipped\":\"card_isFlipped__hTiL9\",\"close\":\"card_close__1vERt\",\"card_cold\":\"card_card_cold__8Z2DU\",\"card_warm\":\"card_card_warm__3zmt1\"};","import { action, payload } from \"ts-action\";\r\nimport { CoordinatesModel, WeatherResponseModel } from \"../../models\";\r\n\r\nexport const getWeatherAction = action(\"Weather/Get\", payload<string>());\r\nexport const getWeatherSuccessAction = action(\"Weather/GetSuccess\", payload<WeatherResponseModel>());\r\nexport const getWeatherFailedAction = action(\"Weather/GetFailed\", payload<string>());\r\n\r\nexport const getWeatherByLocationAction = action(\"WeatherByLocation/Get\", payload<CoordinatesModel>());\r\n\r\nexport const getLocationAction = action(\"Location/Get\");\r\nexport const getLocationSuccessAction = action(\"Location/GetSuccess\", payload<CoordinatesModel>());\r\nexport const getLocationFailedAction = action(\"Location/GetFailed\", payload<string>());\r\n\r\nexport const removeCardAction = action('CardItem/Remove',payload<number>());","import { AppState } from \"../../store/index.reducer\";\r\n\r\nexport const cardListSelector = (state:AppState) => state.weather;","import { WeatherResponseModel } from \"../models\";\r\n\r\nconst getTimeFromDate = (date: Date) =>\r\n  date.toLocaleString(\"en-US\", {\r\n    hour: \"2-digit\",\r\n    minute: \"2-digit\"\r\n  });\r\n\r\nconst getDateWeek = (date: Date) => date.toLocaleString(\"en-US\", {\r\n  weekday: \"short\",\r\n  month: \"short\",\r\n  day: \"numeric\"\r\n});\r\n\r\nexport const getFormattedInfo = (info: WeatherResponseModel) => {\r\n  const { dt, weather, sys, main } = info;\r\n  const date = new Date(dt * 1000);\r\n  return {\r\n    timeFromDate: getTimeFromDate(date),\r\n    dateWeek: getDateWeek(date),\r\n    sunset: getTimeFromDate(new Date(sys.sunset * 1000)),\r\n    sunrise: getTimeFromDate(new Date(sys.sunrise * 1000)),\r\n    icon: `http://openweathermap.org/img/wn/${weather[0].icon}@2x.png`,\r\n    mainTemp: Math.round(main.temp),\r\n    feelsLikeTemp: Math.round(main.feels_like),\r\n    weatherDescription: weather[0].description.charAt(0).toUpperCase() +\r\n      weather[0].description.slice(1)\r\n  };\r\n};","import { useState } from \"react\";\r\nimport classNames from \"classnames\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faArrowLeft, faArrowRight, faTimes } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nimport { WeatherResponseModel } from \"../../../models\";\r\nimport { getFormattedInfo } from \"../../card-list.util\";\r\n\r\nimport css from \"./card.module.scss\";\r\n\r\ninterface Props {\r\n  weatherInfo: WeatherResponseModel;\r\n  onRemove: () => void;\r\n}\r\n\r\nexport const CardItem = ({ weatherInfo, onRemove }: Props) => {\r\n  const [isFlipped, setFlipped] = useState(false);\r\n  const { name, main, wind } = weatherInfo;\r\n  const {\r\n    timeFromDate,\r\n    dateWeek,\r\n    sunrise,\r\n    sunset,\r\n    icon,\r\n    mainTemp,\r\n    feelsLikeTemp,\r\n    weatherDescription\r\n  } = getFormattedInfo(weatherInfo);\r\n\r\n  const handleRemove = () => onRemove();\r\n  const handleFlip = () => setFlipped(prevState => !prevState);\r\n\r\n  const cardBackground = main.temp <= 15 ? css.card_cold : css.card_warm;\r\n\r\n  return (\r\n    <div className={css.card}>\r\n      <div className={classNames(css.inner, isFlipped && css.isFlipped)}>\r\n        <div\r\n          className={classNames(css.side, css.front_side, cardBackground)}\r\n        >\r\n          <span className={css.close} onClick={handleRemove}>\r\n            <FontAwesomeIcon icon={faTimes} />\r\n          </span>\r\n          <h2 className={css.city}>{name}</h2>\r\n          <img className={css.icon} src={icon} alt=\"weather icon\" />\r\n          <h2 className={css.temp}>{mainTemp} °С</h2>\r\n          <p className={css.descr}>\r\n            {weatherDescription}\r\n          </p>\r\n          <h3 className={css.time}>{timeFromDate}</h3>\r\n          <p className={css.date}>{dateWeek}</p>\r\n          <label className={classNames(css.navButtons, css.moreInfo)}>\r\n            More Info\r\n            <button onClick={handleFlip}>\r\n              <FontAwesomeIcon icon={faArrowRight} />\r\n            </button>\r\n          </label>\r\n        </div>\r\n        <div\r\n          className={classNames(css.side, css.back_side, cardBackground)}\r\n        >\r\n          <span className={css.close} onClick={onRemove}>\r\n            <FontAwesomeIcon icon={faTimes} />\r\n          </span>\r\n          <h2 className={css.city}>{name}</h2>\r\n          <div className={css.moreData}>\r\n            <h3>\r\n              Feels :<span>{feelsLikeTemp} °С</span>\r\n            </h3>\r\n            <h3>\r\n              Pressure :<span>{main.pressure} hPa</span>\r\n            </h3>\r\n            <h3>\r\n              Wind :<span>{wind.speed} m/s</span>\r\n            </h3>\r\n            <h3>\r\n              Sunrise :\r\n              <span>{sunrise}</span>\r\n            </h3>\r\n            <h3>\r\n              Sunset :\r\n              <span>{sunset}</span>\r\n            </h3>\r\n          </div>\r\n          <label className={classNames(css.navButtons, css.backButton)}>\r\n            <button onClick={handleFlip}>\r\n              <FontAwesomeIcon icon={faArrowLeft} />\r\n            </button>\r\n            Back\r\n          </label>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import { useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport { removeCardAction } from \"../store/card-list.actions\";\r\nimport { cardListSelector } from \"../store/card-list.selector\";\r\n\r\nimport { CardItem } from \"./card-item/card-item\";\r\nimport css from \"./card-list.module.scss\";\r\n\r\nexport const CardList = () => {\r\n  const dispatch = useDispatch();\r\n  const { weatherList, isLoading } = useSelector(cardListSelector);\r\n\r\n  const handleRemove = (id: number) => () => dispatch(removeCardAction(id));\r\n\r\n  return (\r\n    <>\r\n      {isLoading && <div>Loading...</div>}\r\n      <div className={css.root}>\r\n        {weatherList.map((info) =>\r\n          <CardItem\r\n            key={info.id}\r\n            weatherInfo={info}\r\n            onRemove={handleRemove(info.id)}\r\n          />\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\n\r\n","import { CoordinatesModel, emptyCoordinatesModel, WeatherResponseModel } from \"../../models\";\r\n\r\nexport interface WeatherState {\r\n  weatherList: WeatherResponseModel[],\r\n  coordinates: CoordinatesModel,\r\n  isLoading: boolean,\r\n  error?: string\r\n}\r\n\r\nexport interface WeatherRootState {\r\n  weather: WeatherState;\r\n}\r\n\r\nexport const initialState:WeatherState = {\r\n  weatherList: [],\r\n  coordinates: emptyCoordinatesModel,\r\n  isLoading: false\r\n};","export interface CoordinatesModel {\r\n  \"lon\": number,\r\n  \"lat\": number\r\n}\r\n\r\nexport const emptyCoordinatesModel: CoordinatesModel = {\r\n  lon: 0,\r\n  lat: 0\r\n};","import { initialState, WeatherState } from \"./card-list.state\";\r\nimport { on, reducer } from \"ts-action\";\r\nimport {\r\n  getLocationAction, getLocationFailedAction, getLocationSuccessAction,\r\n  getWeatherAction,\r\n  getWeatherFailedAction,\r\n  getWeatherSuccessAction, removeCardAction\r\n} from \"./card-list.actions\";\r\nimport { WeatherResponseModel } from \"../../models\";\r\n\r\nconst filterWeather = (state: WeatherState, payload: WeatherResponseModel) =>\r\n  state.weatherList.filter(item => item.id === payload.id).length > 0 ? [...state.weatherList] : [...state.weatherList, payload];\r\n\r\nexport const cardListReducer = reducer(\r\n  initialState,\r\n  on(getWeatherAction, (state) => ({ ...state, isLoading: true })),\r\n  on(getWeatherSuccessAction, (state, { payload }) => ({\r\n    ...state,\r\n    isLoading: false,\r\n    weatherList: filterWeather(state, payload)\r\n  })),\r\n  on(getWeatherFailedAction, (state, { payload }) => ({ ...state, isLoading: false, error: payload })),\r\n  on(getLocationAction, (state) => ({ ...state })),\r\n  on(getLocationSuccessAction, (state, { payload }) => ({ ...state, coordinates: payload })),\r\n  on(getLocationFailedAction, (state, { payload }) => ({ ...state, error: payload })),\r\n  on(removeCardAction, (state, { payload }) => ({\r\n    ...state,\r\n    weatherList: state.weatherList.filter(item => item.id !== payload)\r\n  }))\r\n);","import { catchError, concatMap, map, Observable, switchMap } from \"rxjs\";\r\nimport { Action } from \"ts-action\";\r\nimport { ofType, toPayload } from \"ts-action-operators\";\r\nimport {\r\n  getLocationAction,\r\n  getLocationFailedAction,\r\n  getLocationSuccessAction,\r\n  getWeatherAction,\r\n  getWeatherByLocationAction,\r\n  getWeatherFailedAction,\r\n  getWeatherSuccessAction\r\n} from \"./card-list.actions\";\r\nimport { getWeatherByCoordsRequest$, getWeatherRequest$ } from \"../../request/get-weather.request\";\r\nimport { CoordinatesModel } from \"../../models\";\r\n\r\nconst getLocation = (): Observable<CoordinatesModel> => new Observable(observer => {\r\n  if (window.navigator && window.navigator.geolocation) {\r\n    window.navigator.geolocation.getCurrentPosition(\r\n      (position) => {\r\n        observer.next({ lat: position.coords.latitude, lon: position.coords.longitude });\r\n        observer.complete();\r\n      },\r\n      (error) => observer.error(error)\r\n    );\r\n  } else {\r\n    observer.error(\"Unsupported Browser\");\r\n  }\r\n});\r\n\r\nconst getWeatherEpic = (action$: Observable<Action>) =>\r\n  action$.pipe(\r\n    ofType(getWeatherAction),\r\n    toPayload(),\r\n    switchMap((cityName) => getWeatherRequest$(cityName).pipe(\r\n      map(res => getWeatherSuccessAction(res)),\r\n      catchError(error => [getWeatherFailedAction(error.message)])\r\n    ))\r\n  );\r\n\r\n\r\nconst getCoordsEpic = (action$: Observable<Action>) =>\r\n  action$.pipe(\r\n    ofType(getLocationAction),\r\n    switchMap(() => getLocation().pipe(\r\n      concatMap(res => [getLocationSuccessAction(res), getWeatherByLocationAction(res)]),\r\n      catchError(error => [getLocationFailedAction(error.message)]))\r\n    )\r\n  );\r\n\r\nconst getWeatherByLocationEpic = (action$: Observable<Action>) =>\r\n  action$.pipe(\r\n    ofType(getWeatherByLocationAction),\r\n    toPayload(),\r\n    switchMap((res) => getWeatherByCoordsRequest$(res).pipe(\r\n      map(res => getWeatherSuccessAction(res)),\r\n      catchError(error => [getWeatherFailedAction(error.message)])\r\n    ))\r\n  );\r\n\r\nexport const cardListEpics = [getWeatherEpic, getCoordsEpic, getWeatherByLocationEpic];\r\n\r\n","import { fromFetch } from \"rxjs/fetch\";\r\nimport { CoordinatesModel } from \"../models\";\r\n\r\nexport const getWeatherRequest$ = (cityName: string) =>\r\n  fromFetch(`https://api.openweathermap.org/data/2.5/weather?q=${cityName}&appid=${process.env.REACT_APP_API_KEY}&units=metric`,\r\n    {\r\n      method: \"GET\",\r\n      selector: async response => {\r\n        if (response.ok) {\r\n          return (await response.json());\r\n        }\r\n        throw new Error((await response.text()) ?? \"error fetching\");\r\n      }\r\n    }\r\n  );\r\n\r\nexport const getWeatherByCoordsRequest$ = (res: CoordinatesModel) =>\r\n  fromFetch(`https://api.openweathermap.org/data/2.5/weather?lat=${res.lat}&lon=${res.lon}&appid=${process.env.REACT_APP_API_KEY}&units=metric`,\r\n    {\r\n      method: \"GET\",\r\n      selector: async response => {\r\n        if (response.ok) {\r\n          return (await response.json());\r\n        }\r\n        throw new Error((await response.text()) ?? \"error fetching\");\r\n      }\r\n    }\r\n  );\r\n","import { useDispatch } from \"react-redux\";\r\nimport { Field, Form, Formik } from \"formik\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faLocationArrow } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nimport { getLocationAction, getWeatherAction } from \"../card-list\";\r\n\r\nimport css from \"./add-weather-form.module.scss\";\r\n\r\nconst validateCity = (value: string) => !value && \"Required\";\r\n\r\nexport const AddWeatherForm = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const handleGetLocation = () => void dispatch(getLocationAction());\r\n  const handleSubmitForm = (city: string) => void dispatch(getWeatherAction(city));\r\n\r\n  return (\r\n    <div className={css.root}>\r\n      <Formik\r\n        initialValues={{\r\n          city: \"\"\r\n        }}\r\n        onSubmit={values => handleSubmitForm(values.city)}\r\n      >\r\n        {({ errors, touched }) => (\r\n          <Form>\r\n            <Field name=\"city\" validate={validateCity} />\r\n            {errors.city && touched.city && <div>{errors.city}</div>}\r\n            <button type=\"submit\">Get Weather</button>\r\n          </Form>\r\n        )}\r\n      </Formik>\r\n\r\n      <button className={css.location} onClick={handleGetLocation}>\r\n        Current location\r\n        <FontAwesomeIcon className={css.icon} icon={faLocationArrow} />\r\n      </button>\r\n    </div>\r\n  );\r\n};","import { CardList } from \"./card-list\";\r\nimport { AddWeatherForm } from \"./add-weather-form/add-weather-form\";\r\nimport \"./styles/root.scss\";\r\n\r\nexport const App = () => {\r\n  return (\r\n    <div className=\"app\">\r\n      <AddWeatherForm />\r\n      <CardList />\r\n    </div>\r\n  );\r\n};","import { combineReducers } from \"redux\";\r\nimport { cardListReducer } from \"../card-list\";\r\nimport { WeatherRootState } from \"../card-list\";\r\n\r\n\r\nexport interface AppState extends WeatherRootState {\r\n}\r\n\r\nexport default function createRootReducer() {\r\n  return combineReducers<AppState>({\r\n    weather: cardListReducer\r\n  });\r\n}","import { applyMiddleware, createStore } from \"redux\";\r\nimport createRootReducer from \"./index.reducer\";\r\nimport { combineEpics, createEpicMiddleware, Epic } from \"redux-observable\";\r\nimport { cardListEpics } from \"../card-list\";\r\nimport { catchError } from \"rxjs\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\n\r\nconst epicMiddleware = createEpicMiddleware();\r\nconst epics: Epic[] = [\r\n  ...cardListEpics\r\n];\r\n\r\nconst rootEpic = (action$: any, store$: any, dependencies: any) =>\r\n  combineEpics(...epics)(action$, store$, dependencies).pipe(\r\n    catchError((error: any, source) => {\r\n      console.log(error);\r\n\r\n      return source;\r\n    })\r\n  );\r\n\r\nexport default function _createStore(initialState = {}) {\r\n\r\n  const middlewares = applyMiddleware(epicMiddleware);\r\n  const reducer = createRootReducer();\r\n  const store = createStore(reducer, initialState, composeWithDevTools(middlewares));\r\n\r\n  epicMiddleware.run(rootEpic);\r\n\r\n  return store;\r\n}\r\n\r\n","import { StrictMode } from \"react\";\r\nimport { render } from \"react-dom\";\r\nimport { Provider } from \"react-redux\";\r\n\r\nimport { App } from \"./app\";\r\nimport _createStore from \"./store/store\";\r\n\r\nconst store = _createStore();\r\n\r\nrender(\r\n  <StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}